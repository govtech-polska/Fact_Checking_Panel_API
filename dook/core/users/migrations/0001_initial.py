# Generated by Django 3.0.4 on 2020-03-25 12:14

import uuid

from django.db import migrations, models

import dook.core.users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="Invitation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("sent_at", models.DateField(auto_now_add=True)),
                (
                    "token",
                    models.CharField(max_length=64, unique=True, verbose_name="token"),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="e-mail address"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Błąd wysyłki", "FAILED"),
                            ("Oczekujące", "WAITING"),
                            ("W trakcie", "IT"),
                            ("Wykorzystane", "USED"),
                        ],
                        default="Oczekujące",
                        max_length=30,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=50)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("base_user", "Base User"),
                            ("fact_checker", "Fact Checker"),
                            ("expert", "Expert"),
                        ],
                        default="fact_checker",
                        max_length=30,
                    ),
                ),
                (
                    "specialization",
                    models.CharField(
                        choices=[
                            ("journalism", "Dziennikarstwo"),
                            ("biology", "Biologia"),
                            ("physics", "Fizyka"),
                            ("IT", "IT"),
                            ("chemistry", "Chemia"),
                            ("economy", "Ekonomia"),
                            ("other", "Inna"),
                        ],
                        default="other",
                        max_length=30,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_login", models.DateTimeField(auto_now=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_admin", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"abstract": False,},
            managers=[("objects", dook.core.users.models.UserManager()), ],
        ),
    ]
